name: Manage Assignees

on:
  workflow_call:
    inputs:
      action:
        description: "'add' or 'remove'"
        required: true
        type: string
      assignees:
        description: "JSON array of usernames, e.g. [\"octocat\"]"
        required: true
        type: string
    secrets:
      token:
        description: "GitHub token with issues scope"
        required: true

jobs:
  manage-assignees:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Add or remove assignees
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.token }}
          script: |
            try {
              const action = '${{ inputs.action }}'.toLowerCase();
              const rawInput = '${{ inputs.assignees }}';
              const { owner, repo } = context.repo;
              const issue_number = context.issue.number;

              if (!['add', 'remove'].includes(action)) {
                core.setFailed(`üö® ERROR: Invalid action '${action}'. Must be 'add' or 'remove'.`);
                return;
              }

              let assignees = [];
              try {
                assignees = JSON.parse(rawInput);
                if (!Array.isArray(assignees)) throw new Error("Parsed assignees is not an array");
              } catch (err) {
                core.setFailed("üö® ERROR: 'assignees' must be a valid JSON array string");
                return;
              }

              if (!issue_number) {
                core.setFailed("üö® ERROR: No issue or pull request number found in context.");
                return;
              }

              core.info(`‚ÑπÔ∏è INFO: Action = ${action}`);
              core.info(`‚ÑπÔ∏è INFO: Target assignees = ${assignees.join(', ')}`);

              // Fetch current assignees
              const current = context.payload.issue.assignees.map(a => a.login);
              const toProcess = assignees.filter(user =>
                action === 'add' ? !current.includes(user) : current.includes(user)
              );

              if (toProcess.length === 0) {
                core.info(`‚ÑπÔ∏è INFO: No assignees need to be ${action}ed.`);
              } else {
                const op = action === 'add'
                  ? github.rest.issues.addAssignees
                  : github.rest.issues.removeAssignees;

                await op({
                  owner,
                  repo,
                  issue_number,
                  assignees: toProcess
                });

                core.info(`‚úÖ SUCCESS: ${action === 'add' ? 'Assigned' : 'Unassigned'}: ${toProcess.join(', ')}`);
              }

              await core.summary
                .addHeading(`üë• Assignee Management Summary`)
                .addRaw(`**Action**: ${action === 'add' ? 'Add Assignees' : 'Remove Assignees'}`)
                .addBreak()
                .addRaw(`**Target Users**: ${assignees.join(', ') || 'None'}`)
                .addBreak()
                .addRaw(`**Actually ${action}ed**: ${toProcess.length ? toProcess.join(', ') : 'None'}`)
                .write();

            } catch (err) {
              core.setFailed(`üö® ERROR: Unexpected failure during assignee management: ${err.message}`);
            }
