name: Validate Feature Request Ticket (multi-job)

"on":
  workflow_call:
    inputs:
      quiet:
        description: "Suppress validator comments; rely on caller to comment."
        required: false
        type: boolean
        default: false
    outputs:
      problems:
        description: "JSON array of validation problems"
        value: ${{ jobs.validate.outputs.problems }}

permissions:
  issues: write
  contents: read

jobs:
  # 1) Validate and surface outputs
  validate:
    runs-on: ubuntu-latest
    outputs:
      problems:     ${{ steps.validate.outputs.problems }}
      author:       ${{ steps.validate.outputs.author }}
      fail_message: ${{ steps.validate.outputs.fail_message }}
      pass_message: ${{ steps.validate.outputs.pass_message }}
    steps:
      - name: Read issue (author + body)
        id: read
        uses: actions/github-script@v7
        with:
          script: |
            const { data: i } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.issue.number,
            });
            core.setOutput('author', i.user.login);
            core.setOutput('body', i.body || '');

      - name: Validate content
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const body   = `${{ steps.read.outputs.body }}`;
            const author = `${{ steps.read.outputs.author }}`;

            const problems = [];
            if (!/Problem Statement/i.test(body))  problems.push("• Missing **Problem Statement / Background** section");
            if (!/Goals/i.test(body))              problems.push("• Missing **Goals / Outcomes** section");
            if (!/Proposed Solution/i.test(body))  problems.push("• Missing **Proposed Solution** section");

            core.setOutput("author", author);
            core.setOutput("problems", JSON.stringify(problems));

            const failMsg = [
              "",
              `Howdy @${author},`,
              "",
              "The following issues were found in this ticket:",
              problems.join("\\n"),
              "",
              "Please edit the issue to include or expand the required sections above.",
              "",
              "_Until the ticket has passed acceptance checks, it cannot be triaged._",
            ].join("\\n");

            const passMsg = [
              `✅ Thanks @${author}!`,
              "",
              "Your feature request meets the required sections and can now move forward to triage.",
            ].join("\\n");

            core.setOutput("fail_message", failMsg);
            core.setOutput("pass_message", passMsg);

  # 2) Failure branch — comment
  comment-failure:
    needs: validate
    if: ${{ inputs.quiet != true && needs.validate.outputs.problems != '[]' }}
    uses: ./.github/workflows/post-comment.yaml
    with:
      body: ${{ needs.validate.outputs.fail_message }}
    secrets:
      token: ${{ github.token }}

  # 3) Success branch — comment
  comment-success:
    needs: validate
    if: ${{ inputs.quiet != true && needs.validate.outputs.problems == '[]' }}
    uses: ./.github/workflows/post-comment.yaml
    with:
      body: ${{ needs.validate.outputs.pass_message }}
    secrets:
      token: ${{ github.token }}

  # 4) Failure branch — labels (add needs-more-info, remove needs-triage)
  labels-failure:
    needs: validate
    if: ${{ needs.validate.outputs.problems != '[]' }}
    uses: ./.github/workflows/manage-labels.yaml
    with:
      add:    '["needs-more-info"]'
      remove: '["needs-triage"]'
    secrets:
      token: ${{ github.token }}

  # 5) Success branch — labels (add needs-triage, remove needs-more-info)
  labels-success:
    needs: validate
    if: ${{ needs.validate.outputs.problems == '[]' }}
    uses: ./.github/workflows/manage-labels.yaml
    with:
      add:    '["needs-triage"]'
      remove: '["needs-more-info"]'
    secrets:
      token: ${{ github.token }}

  # 6) Failure branch — assign author
  assign-author-on-failure:
    needs: validate
    if: ${{ needs.validate.outputs.problems != '[]' }}
    uses: ./.github/workflows/manage-assignees.yaml
    with:
      action: add
      assignees: ${{ format('["{0}"]', needs.validate.outputs.author) }}
    secrets:
      token: ${{ github.token }}

  # 7) Success branch — unassign author
  unassign-author-on-success:
    needs: validate
    if: ${{ needs.validate.outputs.problems == '[]' }}
    uses: ./.github/workflows/manage-assignees.yaml
    with:
      action: remove
      assignees: ${{ format('["{0}"]', needs.validate.outputs.author) }}
    secrets:
      token: ${{ github.token }}
