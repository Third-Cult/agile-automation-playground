name: Validate Feature Request Ticket

on:
  workflow_call:

jobs:
  run-validation:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Initialize metadata from config
        id: init
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/validation/feature-request.json';

            if (!fs.existsSync(path)) {
              throw new Error(`üö® ERROR: Missing config file at ${path}`);
            }

            const config = JSON.parse(fs.readFileSync(path, 'utf8'));
            const issue = context.payload.issue;
            if (!issue) throw new Error("üö® ERROR: No issue payload found.");

            core.setOutput("body", issue.body || '');
            core.setOutput("issue_number", issue.number);
            core.setOutput("owner", context.repo.owner);
            core.setOutput("repo", context.repo.repo);
            core.setOutput("marker", config.marker);
            core.setOutput("sections", JSON.stringify(config.sections));
            core.setOutput("labels_fail", JSON.stringify(config.labels.fail));
            core.setOutput("labels_pass", JSON.stringify(config.labels.pass));

      - name: Check if this is a feature/enhancement request
        id: check-type
        uses: actions/github-script@v7
        with:
          script: |
            const body = `${{ steps.init.outputs.body }}`;
            const marker = `${{ steps.init.outputs.marker }}`;
            core.setOutput("is-feature", body.includes(marker));

            if (!body.includes(marker)) {
              console.log("‚ÑπÔ∏è INFO: Not a feature/enhancement request. Skipping.");
              return;
            }

            core.setOutput("is-feature", true);

      - name: Validate required sections
        id: validate
        if: steps.check-type.outputs.is-feature == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `${{ steps.init.outputs.body }}`;
            const sections = JSON.parse(`${{ steps.init.outputs.sections }}`);
            const problems = [];

            for (const [section, minLen] of Object.entries(sections)) {
              try {
                const regex = new RegExp(`###\\s*${section}[\\s\\S]*?(?=###|$)`, 'i');
                const match = body.match(regex);

                if (!match) {
                  problems.push(`- Missing required section: **${section}**`);
                  console.log(`üü• FAIL: Missing section: ${section}`);
                } else {
                  const content = match[0].replace(/^###\s*[^\n]+\n/, '').trim();
                  console.log(`‚ÑπÔ∏è INFO: Required section found: ${section}`);
                  if (content.length < minLen) {
                    problems.push(`- **${section}** is too short (minimum ${minLen} characters)`);
                    console.log(`üü• FAIL: Section too short: ${section}`);
                  } else {
                    console.log(`‚úÖ SUCCESS: Required section meets minimum length requirements: ${section}`);
                  }
                }
              } catch (err) {
                console.log(`üö® ERROR: Error parsing section "${section}": ${err.message}`);
                problems.push(`- Error while checking section: **${section}**`);
              }
            }

            core.setOutput("problems", JSON.stringify(problems));

      - name: Comment and label if validation failed
        if: steps.validate.outputs.problems != '[]'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const problems = JSON.parse(`${{ steps.validate.outputs.problems }}`);
              const owner = `${{ steps.init.outputs.owner }}`;
              const repo = `${{ steps.init.outputs.repo }}`;
              const issue_number = Number(`${{ steps.init.outputs.issue_number }}`);
              const labels = const labels = JSON.parse(`${{ steps.init.outputs.labels }}`);
             const issueAuthor = context.payload.issue.user.login;

              const message = [
                "**Feature Request Validation Failed**",
                "",
                `Howdy @${issueAuthor},`,
                "",
                "The following issues were found in this ticket:",
                problems.join('\n'),
                "",
                "Please edit the issue to include or expand the required sections. Until the ticket has passed acceptance checks - it cannot be triaged."
                ].join('\n');


              await github.rest.issues.createComment({ owner, repo, issue_number, body: message });
              console.log("‚ÑπÔ∏è INFO: Comment posted");

              await github.rest.issues.addLabels({ owner, repo, issue_number, labels });
              console.log("‚ÑπÔ∏è INFO: Labels applied:", labels.join(", "));

              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number,
                name: "needs-triage"
              });

              await github.rest.issues.addAssignees({ owner, repo, issue_number, assignees: [issueAuthor] });
              console.log(`‚ÑπÔ∏è INFO: Issue assigned to @${issueAuthor}`);              
            } catch (error) {
              console.log(`üö® ERROR: Failed to comment or label issue: ${error.message}`);
              core.setFailed(error.message);
            }
      - name: Set output: problems
        if: always()
        run: |
          problems='${{ steps.validate.outputs.problems }}'
          {
            echo "problems<<EOF"
            echo "$problems"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"