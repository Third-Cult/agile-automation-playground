name: Validate Feature Request Ticket

on:
  workflow_call:

jobs:
  run-validation:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Initialize inline config
        id: init
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) throw new Error("üö® ERROR: No issue payload found.");

            const config = {
              marker: "üìú Feature/Enhancement Request üìú",
              labels: {
                fail: ["needs-more-info"],
                pass: ["needs-triage"]
              },
              sections: {
                "Problem Statement / Background": 10,
                "Goals / Outcomes": 20,
                "Proposed Solution": 30
              }
            };

            core.setOutput("body", issue.body || '');
            core.setOutput("issue_number", issue.number);
            core.setOutput("owner", context.repo.owner);
            core.setOutput("repo", context.repo.repo);
            core.setOutput("marker", config.marker);
            core.setOutput("sections", JSON.stringify(config.sections));
            core.setOutput("labels_fail", JSON.stringify(config.labels.fail));
            core.setOutput("labels_pass", JSON.stringify(config.labels.pass));

      - name: Check if this is a feature/enhancement request
        id: check-type
        env:
          BODY: ${{ steps.init.outputs.body }}
          MARKER: ${{ steps.init.outputs.marker }}
        uses: actions/github-script@v7
        with:
          script: |
            const body = process.env.BODY;
            const marker = process.env.MARKER;

            const isFeature = body.includes(marker);
            core.setOutput("is-feature", isFeature);

            if (!isFeature) {
              console.log("‚ÑπÔ∏è INFO: Not a feature/enhancement request. Skipping.");
            }

      - name: Validate required sections
        id: validate
        if: steps.check-type.outputs.is-feature == 'true'
        env:
          BODY: ${{ steps.init.outputs.body }}
          SECTIONS: ${{ steps.init.outputs.sections }}
        uses: actions/github-script@v7
        with:
          script: |
            const body = process.env.BODY;
            const sections = JSON.parse(process.env.SECTIONS);
            const problems = [];

            for (const [section, minLen] of Object.entries(sections)) {
              try {
                const regex = new RegExp(`###\\s*${section}[\\s\\S]*?(?=###|$)`, 'i');
                const match = body.match(regex);

                if (!match) {
                  problems.push(`- Missing required section: **${section}**`);
                  console.log(`‚ö†Ô∏è Missing section: ${section}`);
                } else {
                  const content = match[0].replace(/^###\s*[^\n]+\n/, '').trim();
                  if (content.length < minLen) {
                    problems.push(`- **${section}** is too short (minimum ${minLen} characters)`);
                    console.log(`üü• Section too short: ${section}`);
                  }
                }
              } catch (err) {
                problems.push(`- Error while checking section: **${section}**`);
              }
            }

            core.setOutput("problems", JSON.stringify(problems));

      - name: Comment and handle failed validation
        if: steps.validate.outputs.problems != '[]'
        env:
          OWNER: ${{ steps.init.outputs.owner }}
          REPO: ${{ steps.init.outputs.repo }}
          ISSUE_NUMBER: ${{ steps.init.outputs.issue_number }}
          PROBLEMS: ${{ steps.validate.outputs.problems }}
        uses: actions/github-script@v7
        with:
          script: |
            const problems = JSON.parse(process.env.PROBLEMS);
            const issueAuthor = context.payload.issue.user.login;

            const message = [
              "**Feature Request Validation Failed**",
              "",
              `Howdy @${issueAuthor},`,
              "",
              "The following issues were found in this ticket:",
              problems.join('\n'),
              "",
              "Please edit the issue to include or expand the required sections. Until the ticket has passed acceptance checks - it cannot be triaged."
            ].join('\n');

            await github.rest.issues.createComment({
              owner: process.env.OWNER,
              repo: process.env.REPO,
              issue_number: Number(process.env.ISSUE_NUMBER),
              body: message
            });

            // Remove 'needs-triage' if it exists
            try {
              await github.rest.issues.removeLabel({
                owner: process.env.OWNER,
                repo: process.env.REPO,
                issue_number: Number(process.env.ISSUE_NUMBER),
                name: "needs-triage"
              });
            } catch (e) {
              console.log("‚ÑπÔ∏è INFO: 'needs-triage' label was not present.");
            }

            // Assign the author
            await github.rest.issues.addAssignees({
              owner: process.env.OWNER,
              repo: process.env.REPO,
              issue_number: Number(process.env.ISSUE_NUMBER),
              assignees: [issueAuthor]
            });

            await core.summary
              .addHeading('‚ùå Feature Request Validation Failed')
              .addList(problems)
              .addQuote('Please update the ticket and rerun the validation.')
              .write();

      - name: Apply failure labels
        if: steps.validate.outputs.problems != '[]'
        uses: ./.github/workflows/modules/manage-labels.yaml
        with:
          add: ${{ steps.init.outputs.labels_fail }}

      - name: Comment and handle successful validation
        if: steps.validate.outputs.problems == '[]'
        env:
          OWNER: ${{ steps.init.outputs.owner }}
          REPO: ${{ steps.init.outputs.repo }}
          ISSUE_NUMBER: ${{ steps.init.outputs.issue_number }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueAuthor = context.payload.issue.user.login;

            await core.summary
              .addHeading('‚úÖ Feature Request Validation Passed')
              .addRaw(`@${issueAuthor}'s ticket meets all section requirements.`)
              .write();

      - name: Apply success labels
        if: steps.validate.outputs.problems == '[]'
        uses: ./.github/workflows/modules/manage-labels.yaml
        with:
          add: ${{ steps.init.outputs.labels_pass }}

      - name: Echo problems to output
        if: always()
        run: echo "problems=${{ steps.validate.outputs.problems }}" >> $GITHUB_OUTPUT
