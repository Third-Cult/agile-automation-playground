name: Default Ticket Creation
on:
  issues:
    types: [opened]

jobs:
  # Adds all tickets into the default project for simple storage
  add-to-default-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add issues to the default project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const projectId = 'PVT_kwDODMXHZ84A9Dvi'; // Replace with your project ID
            const issueNodeId = context.payload.issue.node_id;

            const result = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId,
              contentId: issueNodeId
            });

            console.log("‚úÖ Issue added to project:", result.addProjectV2ItemById.item.id);
  
  # Adds the initial labels that all tickets have assigned to them (i.e., needs-triage)
  add-default-labels:
    needs: add-to-default-project 
    uses: ./.github/workflows/add-labels.yaml
    with:
      labels: "needs-triage"
    secrets: inherit

  # ISSUE TYPE VALIDATIONS
  validate-feature-type:
    needs: add-default-labels
    if: contains(github.event.issue.body, 'üìú Feature/Enhancement Request üìú')
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Define the variables used in conditionals and ticket adjustment
        uses: actions/github-script@v7
        with:
          script: |
            // Here you can adjust the variables for conditions and logic
            const minLength = 25;                       // Minimum length that the sections have to metch
            const labels_to_add = ['needs-more-info']   // Labels to add if there is an error

            // Identify the sections to check min length & associate values to it
            const sections = {
              "Problem Statement / Background": minLength,
              "Goals / Outcomes": minLength
            };

            // Store any problems that come up
            const problems = [];
            
      - name: Pull out the information from the ticket
        uses: actions/github-script@v7
        with:
          script: |
            // Get the information of the ticket itself
            const body = context.payload.issue.body;
            const issue_number = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
      - name: Perform validation logic - minimum length of highlighted sections
        uses: actions/github-script@v7
        with:
          script: |
            // For each section outlined above
            for (const [section, minLen] of Object.entries(sections)) {
              // Pull out the body of the section for analysis
              const regex = new RegExp(`###\\s*${section}[\\s\\S]*?(?=###|$)`, 'i');
              const match = body.match(regex);

              // If there is no match found - throw a problem
              if (!match) {
                problems.push(`- Missing required section: **${section}**`);
              } else {
                // Parse out the body - trimming
                const content = match[0].replace(/^###\s*[^\n]+\n/, '').trim();
                
                // If the body is too short - throw a probelem with relevant information
                if (content.length < minLen) {
                  problems.push(`- **${section}** is too short (minimum ${minLen} characters)`);
                }
              }
            }

      - name: Communicate identified issues via comments & labels
        uses: actions/github-script@v7
        with:
          script: |
            // If there are problems - create a message with the found problems and post a comment
            if (problems.length > 0) {
              const message = `
              **Feature Request Validation Failed**
              
              The following issues were found in this ticket:
              ${problems.join('\n')}
              
              Please edit the issue to include or expand the required sections.
              `;

              try {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: message,
                });
                console.log('‚úÖ Created Comment: Success');
              } catch (error) {
                if (error.status === 404) {
                  console.log(`‚ö†Ô∏è Failed to generate comment: '${message}'`);
                } else {
                  throw error;
                }
              }

              // Add relevant labels
              try {
                await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number,
                labels: labels_to_add,
                });
                console.log(`‚úÖ Created Label: '${labels_to_add}'`);
              } catch (error) {
                if (error.status === 404) {
                  console.log(`‚ö†Ô∏è Failed to apply label: '${labels_to_add}'`);
                } else {
                  throw error;
                }
              }
            }
