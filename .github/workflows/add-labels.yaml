name: Add Labels

on:
  workflow_call:
    inputs:
      labels:
        description: "Comma-separated list of labels"
        required: true
        type: string

jobs:
  add-labels:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Add validated labels to issue or PR
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const input = '${{ inputs.labels }}';
              const labelsToAdd = input.split(',').map(l => l.trim()).filter(Boolean);
              const { owner, repo } = context.repo;
              const issueNumber = context.issue.number;

              if (!issueNumber) {
                core.setFailed("üö® ERROR: No issue or pull request number found in context.");
                return;
              }

              core.info(`‚ÑπÔ∏è INFO: Requested labels: ${labelsToAdd.join(', ')}`);

              let existingLabels = [];
              try {
                const res = await github.rest.issues.listLabelsForRepo({ owner, repo });
                existingLabels = res.data.map(label => label.name);
              } catch (error) {
                core.warning(`üö® ERROR: Could not fetch existing labels: ${error.message}`);
                throw error;
              }

              const validLabels = labelsToAdd.filter(label => existingLabels.includes(label));
              const invalidLabels = labelsToAdd.filter(label => !existingLabels.includes(label));

              if (validLabels.length === 0) {
                core.warning("üö® ERROR: None of the provided labels exist in the repo.");
              } else {
                try {
                  await github.rest.issues.addLabels({
                    owner,
                    repo,
                    issue_number: issueNumber,
                    labels: validLabels,
                  });
                  core.info(`‚úÖ SUCCESS: Added labels: ${validLabels.join(', ')}`);
                } catch (error) {
                  core.setFailed(`üö® ERROR: Failed to apply labels: ${error.message}`);
                  return;
                }
              }

              if (invalidLabels.length > 0) {
                core.warning(`‚ÑπÔ∏è INFO: These labels do not exist in the repo: ${invalidLabels.join(', ')}`);
              }
            } catch (error) {
              core.setFailed(`üö® ERROR: Unexpected failure: ${error.message}`);
            }
